local term = require("term")
local event = require("event")
local fs = require("filesystem")

function prompt(msg)
  io.write(msg)
  return io.read()
end

function listDocuments(dir)
  local docs = {}
  for file in fs.list(dir) do
    if not fs.isDirectory(fs.concat(dir, file)) then
      table.insert(docs, file)
    end
  end
  return docs
end

function readUserLines(filePath)
  local lines = {}
  local file = io.open(filePath, "r")
  if not file then return lines end
  for line in file:lines() do
    local userLine = line:match('print%("(.*)"%)')
    if userLine then
      table.insert(lines, userLine)
    end
  end
  file:close()
  return lines
end

function editDocument()
  term.clear()
  print("=== Edit Existing Document ===")
  local editDir = prompt("Enter directory of document (e.g., /home): ")
  if not fs.exists(editDir) or not fs.isDirectory(editDir) then
    print("Invalid directory.")
    return
  end
  local docs = listDocuments(editDir)
  if #docs == 0 then
    print("No documents found in this directory.")
    return
  end
  print("Documents:")
  for i, doc in ipairs(docs) do
    print(i .. ". " .. doc)
  end
  local docNum = tonumber(prompt("Enter document number to edit: "))
  if not docNum or not docs[docNum] then
    print("Invalid selection.")
    return
  end
  local filePath = fs.concat(editDir, docs[docNum])
  local lines = readUserLines(filePath)
  print("Current content (edit below, type 'save.' on a new line to finish):")
  for _, line in ipairs(lines) do
    print(line)
  end
  local newLines = {}
  while true do
    local input = prompt("")
    if input == "save." then
      break
    else
      table.insert(newLines, input)
    end
  end
  local file = io.open(filePath, "w")
  file:write('-- Generated by blocuments\n')
  file:write('local term = require("term")\nterm.clear()\n')
  for _, line in ipairs(newLines) do
    file:write('print("' .. line:gsub('"', '\\"') .. '")\n')
  end
  file:close()
  print("\nDocument updated and saved as " .. filePath)
end

function showHelp()
  term.clear()
  print([[[
Blockuments Help/About

This program lets you create and edit simple text documents.
Documents are saved as Lua scripts that print your text.

Features:
- Create new documents
- Edit existing documents (only user text, not code)
- Pagination for large documents
- ASCII art title

Usage:
1. Choose 'Create new document' to make a new file.
2. Choose 'Edit document' to change an existing file.
3. Type 'save.' on a new line to finish editing or creating.
4. Run your document from the shell to view it.

NOTE: Editing documents is currently limited and may not work perfectly.

Created by TNT_CreepEGG
]])
  print("Press Enter to return to menu.")
  io.read()
end

function createDocument()
  term.clear()
  print("=== Create New Document ===")
  local saveDir = prompt("Enter directory to save document (e.g., /home): ")
  if not fs.exists(saveDir) or not fs.isDirectory(saveDir) then
    print("Invalid directory.")
    return
  end
  local docName = prompt("Enter document name: ")
  if not docName:match("^[%w_]+$") then
    print("Invalid name. Use only letters, numbers, and underscores.")
    return
  end
  local lines = {}
  print("Type your document content. On a fresh line, type 'save.' and press Enter to save.")
  while true do
    local input = prompt("")
    if input == "save." then
      break
    else
      table.insert(lines, input)
    end
  end

  local filePath = fs.concat(saveDir, docName)
  local file = io.open(filePath, "w")
  file:write('-- Generated by blocuments\n')
  file:write('local term = require("term")\nterm.clear()\n')
  file:write('local lines = {\n')
  for _, line in ipairs(lines) do
    file:write('  "' .. line:gsub('"', '\\"') .. '",\n')
  end
  file:write('}\n')
  file:write('local pageSize = 40\n')
  file:write('for i = 1, #lines do\n')
  file:write('  print(lines[i])\n')
  file:write('  if i % pageSize == 0 then\n')
  file:write('    io.write("\\nPress Enter to continue...") io.read()\n')
  file:write('    term.clear()\n')
  file:write('  end\n')
  file:write('end\n')
  file:write('if #lines % pageSize ~= 0 then io.write("\\nPress Enter to exit...") io.read() end\n')
  file:close()
  print("\nDocument saved as " .. filePath)
end

while true do
  term.clear()
  print([[
▒█▀▀█ █░░ █▀▀█ █▀▀ █░░█ █▀▄▀█ █▀▀ █▀▀▄ ▀▀█▀▀ █▀▀ 
▒█▀▀▄ █░░ █░░█ █░░ █░░█ █░▀░█ █▀▀ █░░█ ░░█░░ ▀▀█ 
▒█▄▄█ ▀▀▀ ▀▀▀▀ ▀▀▀ ░▀▀▀ ▀░░░▀ ▀▀▀ ▀░░▀ ░░▀░░ ▀▀▀
]])
  print("1. Create new document")
  print("2. Edit document")
  print("3. Help/About")
  print("4. Exit")
  print("")
  print("Note: Editing documents is not currently available and is broken/not done yet")
  print("")
  local choice = prompt("Choose an option: ")
  if choice == "1" then
    createDocument()
    print("Press Enter to return to menu.")
    io.read()
  elseif choice == "2" then
    editDocument()
    print("Press Enter to return to menu.")
    io.read()
  elseif choice == "3" then
    showHelp()
  elseif choice == "4" then
    term.clear()
    break
  else
    print("Invalid choice.")
  end
end
